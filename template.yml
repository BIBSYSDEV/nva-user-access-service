AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Description: >
  The resources for providing a service for listing users and roles.
  It includes a table containing users and roles and lambda functions for accessing the data.

Parameters:
  CognitoAuthorizerArn:
    Type: String
  UsersAndRolesTableName:
    Type: String
  ApiKeySecretArn:
    Type: String
  StageName:
    Type: String
  InternalApiBasePath:
    Type: String
  ExternalApiBasePath:
    Type: String
  CustomDomain:
    Type: String



Globals:
  Api:
    Cors:
      AllowMethods: '''POST, PUT, GET,OPTIONS'''
      AllowHeaders: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
      AllowOrigin: '''*'''

Resources:
  LambdaAuthorizer:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: no.unit.nva.handlers.authorizer.LambdaAuthorizer::handleRequest
      Runtime: java11
      MemorySize: 1408
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          USERS_AND_ROLES_TABLE:  !Ref UsersAndRolesTableName
          API_SECRET_NAME: "UserCatalogueApiKey"
          API_SECRET_KEY: "ApiKey"
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Resource:  !Ref ApiKeySecretArn
              Action:
                - "secretsmanager:GetResourcePolicy"
                - "secretsmanager:GetSecretValue"
                - "secretsmanager:DescribeSecret"
                - "secretsmanager:ListSecretVersionIds"
  InternalApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref StageName
      EndpointConfiguration: REGIONAL
      Auth:
        Authorizers:
          LambdaRequestAuthorizer:
            FunctionArn: !GetAtt LambdaAuthorizer.Arn
            FunctionPayloadType: REQUEST
            Identity:
              Headers:
                - Authorization
              ReauthorizeEvery: 3600
      DefinitionBody:
        openapi: 3.0.1
        info:
          title: NVA Users internal endpoint
          description: Api for updating users and roles
          version: 1.0.0
        paths:
          /service/users:
            post:
              summary: Adds new user
              security:
                - ApiKey: []
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/User'
              responses:
                '200':
                  description: Successful creation of role. Returns the generated role
                  content:
                    "application/json":
                      schema:
                        $ref: '#/components/schemas/User'
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ServiceAddUserHandler.Arn}/invocations
                responses: {}
                httpMethod: POST
                type: aws_proxy
          /service/users/{username}:
            get:
              summary: Get user (service use only)
              parameters:
                - in: path
                  name: username
                  schema:
                    type: string
                  required: true
              security:
                - ApiKey: []
              responses:
                '200':
                  description:  Returns the user.
                  content:
                    "application/json":
                      schema:
                        $ref: '#/components/schemas/User'
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ServiceGetUserHandler.Arn}/invocations
                responses: {}
                httpMethod: POST
                type: aws_proxy
            put:
              summary: Updates an existing User
              parameters:
                - in: path
                  name: username
                  schema:
                    type: string
                  required: true
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/User'
              security:
                - ApiKey: []
              responses:
                '202':
                  description: Successful request for updating the user. User will be eventually updated
                  headers:
                    Location:
                      schema:
                        type: string
                      description: Relative path to the user URI
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ServiceUpdateUserHandler.Arn}/invocations
                responses: {}
                httpMethod: POST
                type: aws_proxy
        components:
          schemas:
            Role:
              properties:
                type:
                  type: string
                rolename:
                  type: string
            User:
              properties:
                type:
                  type: string
                username:
                  type: string
                institution:
                  type: string
                roles:
                  type: array
                  items:
                    $ref: '#/components/schemas/Role'
          securitySchemes:
            ApiKey:
              type: apiKey
              name: Authorization
              in: header
              x-amazon-apigateway-authtype: custom
              x-amazon-apigateway-authorizer:
                type: request
                authorizerUri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaAuthorizer.Arn}/invocations
                identitySource: method.request.header.Authorization
  ExternalApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      EndpointConfiguration: REGIONAL
      DefinitionBody:
        openapi: 3.0.1
        info:
          title: NVA Roles and Users catalogue
          description: Api for updating users and roles
          version: 1.0.0
        paths:
          /roles:
            post:
              summary: Adds new Role
              security:
                - CognitoUserPool: []
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/Role'
              responses:
                '200':
                  description: Successful creation of role. Returns the generated role
                  content:
                    "application/json":
                      schema:
                        $ref: '#/components/schemas/Role'
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AddRoleHandler.Arn}/invocations
                responses: {}
                httpMethod: POST
                type: aws_proxy
          /roles/{role}:
            get:
              summary: Gets an existing Role
              parameters:
                - in: path
                  name: role
                  schema:
                    type: string
                  required: true
              security:
                - CognitoUserPool: []
              responses:
                '200':
                  description: Successful fetching of role. Returns the requested role
                  content:
                    "application/json":
                      schema:
                        $ref: '#/components/schemas/Role'
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetRoleHandler.Arn}/invocations
                responses: {}
                httpMethod: POST
                type: aws_proxy
          /users:
            post:
              summary: Adds new user
              security:
                - CognitoUserPool: []
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/User'
              responses:
                '200':
                  description: Successful creation of role. Returns the generated role
                  content:
                    "application/json":
                      schema:
                        $ref: '#/components/schemas/User'
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AddUserHandler.Arn}/invocations
                responses: {}
                httpMethod: POST
                type: aws_proxy
          /users/{username}:
            get:
              summary: Gets an existing User
              parameters:
                - in: path
                  name: username
                  schema:
                    type: string
                  required: true
              security:
                - CognitoUserPool: []
              responses:
                '200':
                  description: Successful fetching of User. Returns the requested User
                  content:
                    "application/json":
                      schema:
                        $ref: '#/components/schemas/User'
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetUserHandler.Arn}/invocations
                responses: {}
                httpMethod: POST
                type: aws_proxy
            put:
              summary: Updates an existing User
              parameters:
                - in: path
                  name: username
                  schema:
                    type: string
                  required: true
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/User'
              security:
                - CognitoUserPool: []
              responses:
                '202':
                  description: Successful request for updating the user. User will be eventually updated
                  headers:
                    Location:
                      schema:
                        type: string
                      description: Relative path to the user URI
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateUserHandler.Arn}/invocations
                responses: {}
                httpMethod: POST
                type: aws_proxy
          /institutions/{institution}/users:
            get:
              summary: Lists users of specified institution
              parameters:
                - in: path
                  name: institution
                  schema:
                    type: string
                  required: true
              responses:
                '200':
                  description: List of users belonging in the specified institue
                  content:
                    application/json:
                      schema:
                        type: array
                        items:
                          $ref: '#/components/schemas/User'
              security:
                - CognitoUserPool: []
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ListByInstitutionHandler.Arn}/invocations
                responses: {}
                httpMethod: POST
                type: aws_proxy
        components:
          schemas:
            Role:
              properties:
                type:
                  type: string
                rolename:
                  type: string
            User:
              properties:
                type:
                  type: string
                username:
                  type: string
                institution:
                  type: string
                roles:
                  type: array
                  items:
                    $ref: '#/components/schemas/Role'
          securitySchemes:
            CognitoUserPool:
              type: apiKey
              name: Authorization
              in: header
              x-amazon-apigateway-authtype: cognito_user_pools
              x-amazon-apigateway-authorizer:
                type: cognito_user_pools
                providerARNs:
                  - !Ref CognitoAuthorizerArn
            ApiKey:
              type: apiKey
              name: Authorization
              in: header
              x-amazon-apigateway-authtype: custom
              x-amazon-apigateway-authorizer:
                type: request
                authorizerUri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaAuthorizer.Arn}/invocations
                identitySource: method.request.header.Authorization
  UserRoleMappings:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref UsersAndRolesTableName
      AttributeDefinitions:
        - AttributeName: PrimaryKeyHashKey
          AttributeType: S
        - AttributeName: PrimaryKeyRangeKey
          AttributeType: S
        - AttributeName: SecondaryIndex1HashKey
          AttributeType: S
        - AttributeName: SecondaryIndex1RangeKey
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: PrimaryKeyHashKey
          KeyType: HASH
        - AttributeName: PrimaryKeyRangeKey
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: SearchUsersByInstitution
          KeySchema:
            - AttributeName: SecondaryIndex1HashKey
              KeyType: HASH
            - AttributeName: SecondaryIndex1RangeKey
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

  AddRoleHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: no.unit.nva.handlers.AddRoleHandler::handleRequest
      Runtime: java11
      MemorySize: 1408
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          USERS_AND_ROLES_TABLE:  !Ref UsersAndRolesTableName
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersAndRolesTableName
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /roles
            Method: post
            RestApiId: !Ref ExternalApi

  GetRoleHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: no.unit.nva.handlers.GetRoleHandler::handleRequest
      Runtime: java11
      MemorySize: 1408
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          USERS_AND_ROLES_TABLE:  !Ref UsersAndRolesTableName
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref UsersAndRolesTableName
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /roles/{role}
            Method: get
            RestApiId: !Ref ExternalApi
  AddUserHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: no.unit.nva.handlers.AddUserHandler::handleRequest
      Runtime: java11
      MemorySize: 1408
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          USERS_AND_ROLES_TABLE:  !Ref UsersAndRolesTableName
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersAndRolesTableName
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /users
            Method: post
            RestApiId: !Ref ExternalApi

  GetUserHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: no.unit.nva.handlers.GetUserHandler::handleRequest
      Runtime: java11
      MemorySize: 1408
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          USERS_AND_ROLES_TABLE:  !Ref UsersAndRolesTableName
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref UsersAndRolesTableName
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /users/{username}
            Method: get
            RestApiId: !Ref ExternalApi
  UpdateUserHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: no.unit.nva.handlers.UpdateUserHandler::handleRequest
      Runtime: java11
      MemorySize: 1408
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          USERS_AND_ROLES_TABLE:  !Ref UsersAndRolesTableName
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersAndRolesTableName
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /users/{username}
            Method: put
            RestApiId: !Ref ExternalApi
  ListByInstitutionHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: no.unit.nva.handlers.ListByInstitutionHandler::handleRequest
      Runtime: java11
      MemorySize: 1408
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          USERS_AND_ROLES_TABLE:  !Ref UsersAndRolesTableName
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref UsersAndRolesTableName
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /institutions/{institution}/users
            Method: get
            RestApiId: !Ref ExternalApi
  ServiceGetUserHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: no.unit.nva.handlers.GetUserHandler::handleRequest
      Runtime: java11
      MemorySize: 1408
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          USERS_AND_ROLES_TABLE:  !Ref UsersAndRolesTableName
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersAndRolesTableName
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /service/users/{username}
            Method: get
            RestApiId: !Ref InternalApi
  ServiceUpdateUserHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: no.unit.nva.handlers.UpdateUserHandler::handleRequest
      Runtime: java11
      MemorySize: 1408
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          USERS_AND_ROLES_TABLE:  !Ref UsersAndRolesTableName
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersAndRolesTableName
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /service/users/{username}
            Method: put
            RestApiId: !Ref InternalApi
  ServiceAddUserHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: no.unit.nva.handlers.AddUserHandler::handleRequest
      Runtime: java11
      MemorySize: 1408
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          USERS_AND_ROLES_TABLE:  !Ref UsersAndRolesTableName
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersAndRolesTableName
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /service/users
            Method: post
            RestApiId: !Ref InternalApi
  InternalApiStaticUrl:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      BasePath: !Ref InternalApiBasePath
      DomainName: !Ref CustomDomain
      RestApiId: !Ref InternalApi
      Stage: !Ref  InternalApi.Stage
  ExternalApiStaticUrl:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      BasePath: !Ref ExternalApiBasePath
      DomainName: !Ref CustomDomain
      RestApiId: !Ref ExternalApi
      Stage: !Ref ExternalApi.Stage

