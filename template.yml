AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Description: >
  The resources for providing a service for listing users and roles.
  It includes a table containing users and roles and lambda functions for accessing the data.

Parameters:
  CognitoAuthorizerArn:
    Type: String

Globals:
  Api:
    Cors:
      AllowMethods: "'PUT, POST, GET, OPTIONS'"
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      AllowOrigin: "'*'"
|
Resources:
  RestApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      EndpointConfiguration: REGIONAL
      #      Auth:
      #        ApiKeyRequired: false
      #        DefaultAuthorizer: CognitoUserPool
      #        Authorizers:
      #          CognitoUserPool:
      #            UserPoolArn: !Ref CognitoAuthorizerArn
      #            AuthType: "cognito_user_pools"
      DefinitionBody:
        openapi: 3.0
        info:
          title: roles and users access
          description: Api for updating users and roles
          version: 1.0.0
        paths:
          /roles:
            post:
              summary: Adds new Role
              security:
                - CognitoUserPool: []
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/Role'
              responses:
                '200':
                  description: Successful creation of role. Returns the generated role
                  content:
                    "application/json":
                      schema:
                        $ref: '#/components/schemas/Role'
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AddRoleHandler.Arn}/invocations
                responses: {}
                httpMethod: POST
                type: aws_proxy
          /roles/{role}:
            get:
              summary: Gets an existing Role
              parameters:
                - in: path
                  name: role
                  schema:
                    type: string
                  required: true
              security:
                - CognitoUserPool: []
              responses:
                '200':
                  description: Successful fetching of role. Returns the requested role
                  content:
                    "application/json":
                      schema:
                        $ref: '#/components/schemas/Role'
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetRoleHandler.Arn}/invocations
                responses: {}
                httpMethod: POST
                type: aws_proxy
          /users:
            post:
              summary: Adds new user
              security:
                - CognitoUserPool: []
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/User'
              responses:
                '200':
                  description: Successful creation of role. Returns the generated role
                  content:
                    "application/json":
                      schema:
                        $ref: '#/components/schemas/User'
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AddUserHandler.Arn}/invocations
                responses: {}
                httpMethod: POST
                type: aws_proxy
          /users/{username}:
            get:
              summary: Gets an existing User
              parameters:
                - in: path
                  name: username
                  schema:
                    type: string
                  required: true
              security:
                - CognitoUserPool: []
              responses:
                '200':
                  description: Successful fetching of User. Returns the requested User
                  content:
                    "application/json":
                      schema:
                        $ref: '#/components/schemas/User'
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetUserHandler.Arn}/invocations
                responses: {}
                httpMethod: POST
                type: aws_proxy
        components:
          schemas:
            Role:
              properties:
                rolename:
                  type: string
            User:
              properties:
                username:
                  type: string
                institution:
                  type: string
                roles:
                  type: array
                  items:
                    $ref: '#/components/schemas/Role'
          securitySchemes:
            CognitoUserPool:
              type: apiKey
              name: Authorization
              in: header
              x-amazon-apigateway-authtype: cognito_user_pools
              x-amazon-apigateway-authorizer:
                type: cognito_user_pools
                providerARNs:
                  - !Ref CognitoAuthorizerArn
  UserRoleMappings:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: UsersRoles
      AttributeDefinitions:
        - AttributeName: PK1A
          AttributeType: S
        - AttributeName: PK1B
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: PK1A
          KeyType: HASH
        - AttributeName: PK1B
          KeyType: RANGE

  LambdaRole:
    DependsOn: UserRoleMappings
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: LambdaAccessPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "dynamodb:BatchGetItem"
                  - "dynamodb:BatchWriteItem"
                  - "dynamodb:GetItem"
                  - "dynamodb:PutItem"
                  - "dynamodb:Query"
                  - "dynamodb:UpdateItem"
                Resource: !GetAtt UserRoleMappings.Arn

  AddRoleHandler:
    DependsOn: [ LambdaRole, UserRoleMappings]
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: no.unit.nva.handlers.AddRoleHandler::handleRequest
      Runtime: java11
      MemorySize: 1408
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /roles
            Method: post
            RestApiId: !Ref RestApi

  GetRoleHandler:
    DependsOn: [ LambdaRole, UserRoleMappings]
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: no.unit.nva.handlers.GetRoleHandler::handleRequest
      Runtime: java11
      MemorySize: 1408
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /roles/{role}
            Method: get
            RestApiId: !Ref RestApi
  AddUserHandler:
    DependsOn: [ LambdaRole, UserRoleMappings]
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: no.unit.nva.handlers.AddUserHandler::handleRequest
      Runtime: java11
      MemorySize: 1408
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /users
            Method: post
            RestApiId: !Ref RestApi

  GetUserHandler:
    DependsOn: [ LambdaRole, UserRoleMappings]
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: no.unit.nva.handlers.GetUserHandler::handleRequest
      Runtime: java11
      MemorySize: 1408
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /users/{username}
            Method: get
            RestApiId: !Ref RestApi