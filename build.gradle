plugins {
    id 'java-library'
    id 'jacoco'
    id 'checkstyle'
    id 'pmd'
    id "nebula.lint" version "16.9.1"
    id 'maven'
}





allprojects {
    apply plugin: 'maven'
    apply plugin: 'nebula.lint'

    project.ext{
        nvaCommonsVersion = '0.6.0'
        awsSdkVersion ="1.11.894"
    }
//
//    gradleLint {
//        //TODO: fix gradle linting after refactor
//        //rules = ['all-dependency', 'duplicate-dependency-class', 'unused-exclude-by-dep']
//        rules = ['unused-dependency']
//    }

    repositories {
        jcenter()
        maven { url 'https://jitpack.io' }
        maven { url "https://s3.eu-central-1.amazonaws.com/dynamodb-local-frankfurt/release" }
    }
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'jacoco'
    apply plugin: 'checkstyle'
    apply plugin: 'pmd'

    final def jupiterVersion = "5.6.0"

    dependencies {

        testImplementation group: 'com.github.BIBSYSDEV', name: 'nva-testutils', version: '0.1.13'
        testImplementation group: 'com.amazonaws', name: 'DynamoDBLocal', version: '1.12.0'
        testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.3.3'

        testImplementation('org.zalando:problem:0.24.0') {
            dependencies {
                compileOnly(group: 'org.apiguardian', name: 'apiguardian-api', version: '1.1.0') {
                    because 'Dependency has maven scope provided'
                }
            }

        }
        testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: jupiterVersion
        testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: jupiterVersion
        testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: jupiterVersion
        testImplementation group: 'org.hamcrest', name: 'hamcrest', version: '2.2'
        gradleLint.ignore {
            // gradleLint wants this to be testRuntimeOnly, but cucumber fails to run when this is not
            // set to testImplementation.
            testImplementation(group: 'io.cucumber', name: 'cucumber-picocontainer', version: '6.1.1') {
                because("Dependency injection in cucumber glue code")
            }
        }
    }

    test {
        useJUnitPlatform()
        failFast = true
        testLogging {
            events('skipped', 'passed', 'failed')
        }
        final Map<String, String> envVariables = new HashMap<>()
        envVariables.put("ALLOWED_ORIGIN", "*")
        environment(envVariables)
        finalizedBy jacocoTestReport
    }

    jacocoTestReport {
        reports {
            xml.enabled true
        }
    }

    pmd {
        ruleSetConfig = rootProject.resources.text.fromFile('config/pmd/ruleset.xml')
        ruleSets = []
        ignoreFailures = false
    }

    checkstyle {
        configFile = rootProject.resources.text.fromFile('config/checkstyle/checkstyle.xml').asFile()
        showViolations = true
    }

    tasks.withType(Checkstyle) {
        reports {
            xml.enabled false
            html.enabled true
            html.stylesheet rootProject.resources.text.fromFile('config/checkstyle/checkstyle-simple.xsl')
        }
    }

    // jacoco configuration
    check.dependsOn jacocoTestCoverageVerification
    jacocoTestCoverageVerification.dependsOn(jacocoTestReport)

    jacocoTestCoverageVerification {
        violationRules {
            rule {
                limit {
                    counter = 'METHOD'
                    value = 'COVEREDRATIO'
                    minimum = 0.000
                }
            }
            rule {
                limit {
                    counter = 'CLASS'
                    value = 'COVEREDRATIO'
                    minimum = 0.000
                }
            }
        }
    }

    // publish submodules
    task sourcesJar(type: Jar, dependsOn: classes) {
        archiveClassifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives sourcesJar
    }
}
