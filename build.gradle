plugins {
    id 'java'
    id 'jacoco'
    id 'checkstyle'
    id 'pmd'
    id "nebula.lint" version "16.9.0"

}


repositories {
    jcenter()
    maven { url 'https://jitpack.io' }
    maven { url "https://s3.eu-central-1.amazonaws.com/dynamodb-local-frankfurt/release" }

}


def jacksonVersion = "2.10.3"
def jupiterVersion = "5.6.0"
def awsSdkVersion = "1.11.791"

dependencies {
   // implementation group: 'com.amazonaws', name: 'aws-lambda-java-core', version: '1.2.0'
   // implementation group: 'com.amazonaws', name: 'aws-lambda-java-events', version: '2.2.7'
   // implementation group: 'com.amazonaws', name: 'aws-java-sdk-lambda', version: awsSdkVersion
    implementation group: 'com.amazonaws', name: 'aws-java-sdk-dynamodb', version: awsSdkVersion

    //implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jdk8', version: jacksonVersion
    //implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: jacksonVersion
    //implementation group: 'com.fasterxml.jackson.module', name: 'jackson-module-parameter-names', version: jacksonVersion

    implementation group: 'com.github.BIBSYSDEV', name: 'nva-commons', version: '0.3.5'

    testImplementation group: 'com.amazonaws', name: 'DynamoDBLocal', version: '1.12.0'

    testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.3.3'

    testImplementation group: 'io.cucumber', name: 'cucumber-java', version: '5.6.0'

    testImplementation ("org.junit.jupiter:junit-jupiter:${jupiterVersion}")
    testImplementation group: 'org.hamcrest', name: 'hamcrest', version: '2.2'

}

task copyNativeDeps(type: Copy) {
    from(configurations.testImplementation) {
        include "*.dylib"
        include "*.so"
        include "*.dll"
    }
    into 'build/dynamodb-local'
}

test.dependsOn copyNativeDeps
test.doFirst {
    systemProperty "java.library.path", 'build/dynamodb-local'
}

test {
    useJUnitPlatform()
    failFast = true
    testLogging {
        events 'skipped', 'passed', 'failed'
    }
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

pmd {
    ruleSetConfig = rootProject.resources.text.fromFile('config/pmd/ruleset.xml')
    ruleSets = []
    ignoreFailures = false
}

checkstyle {
    configFile = rootProject.resources.text.fromFile('config/checkstyle/checkstyle.xml').asFile()
    showViolations = true
}

tasks.withType(Checkstyle) {
    reports {
        xml.enabled false
        html.enabled true
        html.stylesheet rootProject.resources.text.fromFile('config/checkstyle/checkstyle-simple.xsl')
    }
}

// jacoco configuration
check.dependsOn jacocoTestCoverageVerification
jacocoTestCoverageVerification.dependsOn(jacocoTestReport)

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 1.00
            }
        }

        rule {
            limit {
                counter = 'CLASS'
                value = 'COVEREDRATIO'
                minimum = 1.00
            }
        }
    }
}


// Cucumber configurations
configurations.testImplementation.canBeResolved = true
configurations {
    cucumberRuntime {
        extendsFrom testImplementation
    }
}

task cucumber() {
    dependsOn assemble, compileTestJava
    doLast {
        javaexec {
            main = "io.cucumber.core.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            args = ['--plugin', 'pretty', '--glue', 'features', 'src/test/resources']
        }
    }
}

gradleLint{
    rules = ['unused-dependency']
}